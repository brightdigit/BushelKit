# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:mac)

platform :mac do  
  lane :connect_feedback do
    fastlane_require 'spaceship'
    fastlane_require 'csv'
    
    identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    itc_team_id = CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_id)
    
    Spaceship::Tunes.login
    # Spaceship::Tunes.select_team
  
    Spaceship::Tunes.client.team_id = itc_team_id
  
    # Gets app
    app = Spaceship::ConnectAPI::App.find(identifier)
  
    # Gets feedback for an app (default includes screenshots and tester info)
    feedbacks = app.get_beta_feedback
  
    headers = ["Date", "Email", "Comment", "Build", "Device", "iOS Version", "Screenshot"]
  
    CSV.open("reviews.csv", "w") do |csv|
      csv << headers
      feedbacks.each do |feedback|
        # device_model os_version
        response = ["#{feedback.timestamp}", "#{feedback.email_address}", "#{feedback.comment}", "#{feedback.build.version}", "#{feedback.device_model}", "#{feedback.os_version}"]
        
        # Iterate over feedback screenshots
        feedback.screenshots.each do |screenshot|
          image_asset = screenshot.image_assets.first        
          response += ["#{image_asset["url"]}"]
        end
        
        csv << response
      end
    end
  end
  lane :meta do 
  
    upload_to_app_store(
      skip_binary_upload: true,
      precheck_include_in_app_purchases: false,
      overwrite_screenshots: true
    )  
  end
  
  lane :archive do 
    xcodes(version: "15.1")
    api_key = app_store_connect_api_key(
      key_id: ENV['SPACESHIP_CONNECT_API_KEY_ID'],
      issuer_id: ENV['SPACESHIP_CONNECT_API_ISSUER_ID'],
      key_content: ENV['SPACESHIP_CONNECT_API_KEY_CONTENT']
    )
    
    match(type: "appstore", additional_cert_types: "mac_installer_distribution", keychain_password: ENV['FASTLANE_KEYCHAIN_PASSWORD'])
    build_app(
      output_directory: "public",
      build_path: "public",
      scheme: "Bushel",
      export_options: {
        provisioningProfiles: { 
          "com.brightdigit.Bushel" => "match AppStore com.brightdigit.Bushel macos"
        },
        installer_cert_name: "Mac Installer Distribution: BRIGHT DIGIT LLC (MLT7M394S7)",
      }
    )
  end
  
  desc "Push a new beta build to TestFlight"
  lane :beta do
    version = get_version_number(target: "Bushel")
    build_number = `yq eval '.settings .CURRENT_PROJECT_VERSION' ../project.yml`.strip.to_i
    tag = "#{version}-build.#{build_number}"
    remote_branch = ENV["CI_COMMIT_REF_NAME"]
    
    archive
    upload_to_testflight(skip_waiting_for_build_processing: true)  
    
    add_git_tag(tag: tag)     
    system "yq eval \".settings.CURRENT_PROJECT_VERSION = \"#{build_number+1}\"\" -i ../project.yml"
    git_commit(path: ["project.yml"], message: "Increment Build Number to #{build_number+1} [ci skip]", skip_git_hooks: true)
    push_to_git_remote(local_branch: "HEAD", remote_branch: remote_branch)      
    
    upload_to_app_store(
      force: true, 
      skip_binary_upload: true,
      precheck_include_in_app_purchases: false,
      overwrite_screenshots: true
    )    
  end
  
  
  desc "Push a new beta build to TestFlight"
  lane :production do
    build_number = `yq eval '.settings .CURRENT_PROJECT_VERSION' ../project.yml`.strip.to_i
    prebuild_info = `yq eval -o json -I0 '.targetTemplates.Application.info.properties.BrightDigitPrereleaseInfo' ../project.yml`.strip.dump    
    remote_branch = ENV["CI_COMMIT_REF_NAME"]
    
    #puts prebuild_info
    system "yq eval \".settings.CURRENT_PROJECT_VERSION = \"#{build_number+1}\"\" -i ../project.yml"
    system "yq 'del(.targetTemplates.Application.info.properties.BrightDigitPrereleaseInfo)' -i ../project.yml"
    system "LINT_MODE=NONE xcodegen -s ../project.yml"
    
    version = get_version_number(target: "Bushel")
    tag = "#{version}-appstore.#{build_number}"
    
    archive
    upload_to_testflight(skip_waiting_for_build_processing: true)  
    
    upload_to_app_store(
      force: true, 
      skip_binary_upload: true,
      precheck_include_in_app_purchases: false,
      overwrite_screenshots: true,
      submit_for_review: false,
      automatic_release: false,    
      submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_uses_encryption: false
      }
    )  
    
    git_commit(path: ["project.yml"], message: "Posting Build #{build_number+1} to App Store [ci skip]", skip_git_hooks: true)
    add_git_tag(tag: tag)     
    push_to_git_remote(local_branch: "HEAD", remote_branch: remote_branch)        

    system "yq eval \".targetTemplates.Application.info.properties.BrightDigitPrereleaseInfo = \"#{prebuild_info}\"\" -i ../project.yml"
    system "yq eval \".settings.CURRENT_PROJECT_VERSION = \"#{build_number+1}\"\" -i ../project.yml"
  
    git_commit(path: ["project.yml"], message: "Increment Build Number to #{build_number+1} [ci skip]", skip_git_hooks: true)
    push_to_git_remote(local_branch: "HEAD", remote_branch: remote_branch)      

  end
end
