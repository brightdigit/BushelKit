//
// Machine.swift
// Copyright (c) 2023 BrightDigit.
//

import BushelCore
import Foundation

#if canImport(SwiftUI)
  import SwiftUI
#endif

public protocol Machine {
  var configuration: MachineConfiguration { get }
  /** @abstract Execution state of the virtual machine. */
  var state: MachineState { get }

  /**
   @abstract Return YES if the machine is in a state that can be started.
   @see -[VZVirtualMachine startWithCompletionHandler:].
   @see -[VZVirtualMachine state]
   */
  var canStart: Bool { get }

  /**
   @abstract Return YES if the machine is in a state that can be stopped.
   @see -[VZVirtualMachine stopWithCompletionHandler:]
   @see -[VZVirtualMachine state]
   */
  var canStop: Bool { get }

  /**
   @abstract Return YES if the machine is in a state that can be paused.
   @see -[VZVirtualMachine pauseWithCompletionHandler:]
   @see -[VZVirtualMachine state]
   */
  var canPause: Bool { get }

  /**
   @abstract Return YES if the machine is in a state that can be resumed.
   @see -[VZVirtualMachine resumeWithCompletionHandler:]
   @see -[VZVirtualMachine state]
   */
  var canResume: Bool { get }

  /**
   @abstract Returns whether the machine is in a state where the guest can be asked to stop.
   @see -[VZVirtualMachine requestStopWithError:]
   @see -[VZVirtualMachine state]
   */
  var canRequestStop: Bool { get }

  func start() async throws
  func pause() async throws
  func stop() async throws
  func resume() async throws

  /**
   @abstract Restore a virtual machine.
   @discussion
   Restore a stopped virtual machine to a state previously saved to file through `saveMachineStateToURL:completionHandler:`.

   If the file cannot be read, or contains otherwise invalid contents, this operation will fail with a `VZErrorRestore` error.
   If the virtual machine is not in the stopped state, this operation will fail with a `VZErrorInvalidVirtualMachineStateTransition` error.
   If the virtual machine cannot be started due to an internal error, this operation will fail with a `VZErrorInternal` error.
   The `VZVirtualMachineConfiguration` must also support restoring, which can be checked with  `-[VZVirtualMachineConfiguration validateSaveRestoreSupportWithError:]`.

   If this operation fails, the virtual machine state is unchanged.
   If successful, the virtual machine is restored and placed in the paused state.
   @param saveFileURL URL to file containing saved state of a suspended virtual machine.
   The file must have been generated by `saveMachineStateToURL:completionHandler:` on the same host.
   Otherwise, this operation will fail with a `VZErrorRestore` error indicating a permission denied failure reason.

   The virtual machine must also be configured compatibly with the state contained in the file.
   If the `VZVirtualMachineConfiguration` is not compatible with the content of the file, this operation will fail with a `VZErrorRestore` error indicating an invalid argument failure reason.

   Files generated with `saveMachineStateToURL:completionHandler:` on a software version that is newer than the current version will also be rejected with an invalid argument failure reason.
   In some cases, `restoreMachineStateFromURL:completionHandler:` can fail if a software update has changed the host in a way that would be incompatible with the previous format.
   In this case, an invalid argument error will be surfaced. In most cases, the virtual machine should be restarted with `startWithCompletionHandler:`.
   @param completionHandler Block called after the virtual machine has been successfully started or on error.
   The error parameter passed to the block is nil if the restore was successful.
   @see -[VZVirtualMachineConfiguration validateSaveRestoreSupportWithError:]
   */
  func restoreMachineStateFrom(url saveFileURL: URL) async throws

  /**
   @abstract Save a virtual machine.
   @discussion
   Save a paused virtual machine to file.
   The contents of this file can be used later to restore the state of the paused virtual machine.

   If the virtual machine is not paused, this operation will fail with a `VZErrorInvalidVirtualMachineState` error.
   If the virtual machine cannot be saved, this operation will fail with a `VZErrorSave` error.
   The `VZVirtualMachineConfiguration` must also support saving, which can be checked with  `-[VZVirtualMachineConfiguration validateSaveRestoreSupportWithError:]`.

   If this operation fails, the virtual machine state is unchanged.
   If successful, the file is written out and the virtual machine state is unchanged.
   @param saveFileURL URL to location where the saved state of the virtual machine is to be written.
   Each file is protected by an encryption key that is tied to the host on which it is created.
   @param completionHandler Block called after the virtual machine has been successfully saved or on error.
   The error parameter passed to the block is nil if the save was successful.
   @see -[VZVirtualMachineConfiguration validateSaveRestoreSupportWithError:]
   */
  func saveMachineStateTo(url saveFileURL: URL) async throws

  /**
   @abstract Request that the guest turns itself off.
   @param error If not nil, assigned with the error if the request failed.
   @return YES if the request was made successfully.
   @discussion The -[VZVirtualMachineDelegate guestDidStopVirtualMachine:] delegate method is invoked when the guest has turned itself off.
   @seealso -[VZVirtualMachineDelegate guestDidStopVirtualMachine:].
   */
  func requestStop() async throws

  func beginObservation(_ update: @escaping (MachineChange) -> Void) -> UUID

  @discardableResult
  func removeObservation(withID id: UUID) -> Bool
}

public extension Machine {
  @discardableResult
  func removeObservation(withID id: UUID?) -> Bool {
    if let id {
      return self.removeObservation(withID: id)
    }
    return false
  }
}
