//
// Machine.swift
// Copyright (c) 2023 BrightDigit.
//

import BushelCore
import Foundation

#if canImport(SwiftUI)
  import SwiftUI
#endif

public protocol Machine {
  var configuration: MachineConfiguration { get }
  /// Execution state of the virtual machine.
  var state: MachineState { get }

  /// Return YES if the machine is in a state that can be started.
  ///
  /// - SeeAlso: ``start()``
  /// - SeeAlso: ``state``
  var canStart: Bool { get }

  /// Return YES if the machine is in a state that can be stopped.
  ///
  /// - SeeAlso: ``stop()``
  /// - SeeAlso: ``state``
  var canStop: Bool { get }

  /// Return YES if the machine is in a state that can be paused.
  ///
  /// - SeeAlso: ``pause()``
  /// - SeeAlso: ``state``
  var canPause: Bool { get }

  /// Return YES if the machine is in a state that can be resumed.
  ///
  /// - SeeAlso: ``resume()``
  /// - SeeAlso: ``state``
  var canResume: Bool { get }

  /// Returns whether the machine is in a state where the guest can be asked to stop.
  ///
  /// - SeeAlso: ``requestStop()``
  /// - SeeAlso: ``state``
  var canRequestStop: Bool { get }

  func start() async throws
  func pause() async throws
  func stop() async throws
  func resume() async throws

  /// Restore a virtual machine.
  ///
  /// Restore a stopped virtual machine to a state previously saved to file
  /// through `saveMachineStateTo(url:)`.
  ///
  /// If the file cannot be read, or contains otherwise invalid contents, this operation will fail
  /// with a `VZErrorRestore` error.
  /// If the virtual machine is not in the stopped state, this operation will fail
  /// with a `VZErrorInvalidVirtualMachineStateTransition` error.
  /// If the virtual machine cannot be started due to an internal error, this operation will fail
  /// with a `VZErrorInternal` error.
  /// The `VZVirtualMachineConfiguration` must also support restoring, which can be checked
  /// with  `VZVirtualMachineConfiguration.validateSaveRestoreSupport()`.
  ///
  /// If this operation fails, the virtual machine state is unchanged.
  /// If successful, the virtual machine is restored and placed in the paused state.
  ///
  /// The file must have been generated by `saveMachineStateTo(url:)`  on the same host.
  /// Otherwise, this operation will fail with a `VZErrorRestore` error indicating a permission
  /// denied failure reason.
  ///
  /// The virtual machine must also be configured compatibly with the state contained in the file.
  /// If the `VZVirtualMachineConfiguration` is not compatible with the content of the file,
  ///  this operation will fail with a `VZErrorRestore` error indicating an invalid argument failure reason.
  ///
  /// Files generated with `saveMachineStateTo(url:)` on a software version that is newer than
  /// the current version will also be rejected with an invalid argument failure reason.
  /// In some cases, `restoreMachineStateFrom(url:)` can fail if a software update has changed
  /// the host in a way that would be incompatible with the previous format.
  /// In this case, an invalid argument error will be surfaced. In most cases, the virtual machine
  /// should be restarted with  `start()`.
  ///
  /// - Parameter saveFileURL: URL to file containing saved state of a suspended virtual machine.
  /// - SeeAlso: ``VZVirtualMachineConfiguration.validateSaveRestoreSupport()``
  func restoreMachineStateFrom(url saveFileURL: URL) async throws

  /// Save a virtual machine.
  ///
  /// Save a paused virtual machine to file.
  /// The contents of this file can be used later to restore the state of the paused virtual machine.
  ///
  /// If the virtual machine is not paused, this operation will fail with
  /// a `VZErrorInvalidVirtualMachineState` error.
  /// If the virtual machine cannot be saved, this operation will fail with a `VZErrorSave` error.
  /// The `VZVirtualMachineConfiguration` must also support saving, which can be checked
  /// with  `VZVirtualMachineConfiguration.validateSaveRestoreSupport()`.
  ///
  /// If this operation fails, the virtual machine state is unchanged.
  /// If successful, the file is written out and the virtual machine state is unchanged.
  ///
  /// - Parameter saveFileURL: Location where the saved state of the virtual machine is to be written.
  ///   Each file is protected by an encryption key that is tied to the host on which it is created.
  /// - SeeAlso: ``VZVirtualMachineConfiguration.validateSaveRestoreSupport()``
  func saveMachineStateTo(url saveFileURL: URL) async throws

  /// Request that the guest turns itself off.
  ///
  /// - Parameter error: If not nil, assigned with the error if the request failed.
  /// - Returns: true if the request was made successfully.
  func requestStop() async throws

  func beginObservation(_ update: @escaping @MainActor (MachineChange) -> Void) -> UUID

  @discardableResult
  func removeObservation(withID id: UUID) -> Bool
}

public extension Machine {
  @discardableResult
  func removeObservation(withID id: UUID?) -> Bool {
    if let id {
      return self.removeObservation(withID: id)
    }
    return false
  }
}
