variables:
  FF_USE_FASTZIP: "true"
  TRANSFER_METER_FREQUENCY: "2s"
  ARTIFACT_COMPRESSION_LEVEL: "fastest"
  CACHE_COMPRESSION_LEVEL: "fastest"
  MINT_ARGS: "-n -m Mintfile --silent"
  
stages:
  - build
  - lint
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /.*WIP$/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    
cache:
  - key: 
      files:
        - Package.resolved
    paths:
      - Packages/RadiantKit/.build
      - Packages/BushelKit/.build
      - ~/.swiftpm
  - key:
      files: 
        - Mintfile
    paths:
      - .mint

.build_template: &build_template
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$APPSTORE_DEPLOY == null'
  tags:
    - macos
  artifacts:
    paths:
      - cobertura.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml

.build_spm_macos: &build_spm_macos
  script:
    - sudo /usr/bin/xcode-select --switch /Applications/Xcode-beta.app
    - MINT_PATH="$PWD/.mint" /opt/homebrew/bin/mint bootstrap
    - pushd Packages/$PACKAGE_NAME
    - xcodebuild -resolvePackageDependencies
    - xcodebuild build -quiet -scheme $SCHEME_NAME -derivedDataPath Build -destination "OS=17.5,name=iPhone 15" &>/dev/null || true
    - xcodebuild build -quiet -scheme $SCHEME_NAME -derivedDataPath Build -destination "OS=17.5,name=iPhone 15"
    - xcodebuild test -scheme $SCHEME_NAME -sdk iphonesimulator17.5 -destination "OS=17.5,name=iPhone 15" -enableCodeCoverage YES -derivedDataPath Build
    - popd
    - XCRESULT=$(find . -path "./Packages/$PACKAGE_NAME/Build/Logs/Test/Test-$SCHEME_NAME-*.xcresult")
    - echo ${XCRESULT}    
    - MINT_PATH="$PWD/.mint" /opt/homebrew/bin/mint run $MINT_ARGS xcresultparser -o cobertura ${XCRESULT} > cobertura.xml


.lint_template: &lint_template
  stage: lint
  tags:
    - macos
  script:
    - |
      if [ -n "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" ]; then
        BRANCH_NAME="$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME";
      else
        BRANCH_NAME="$CI_COMMIT_REF_NAME";
      fi
      echo "Branch name: $BRANCH_NAME"
      if [[ "$BRANCH_NAME" =~ STRICT ]] || [[ "$BRANCH_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-\w+\.[0-9]+)?$ ]]; then
        export LINT_MODE=STRICT;
      fi
      echo "Lint mode: $LINT_MODE"
    - if [ "$LINT_MODE" = "STRICT" ]; then find . -type f -name ".gitrepo" -exec false {} +; fi
    - ./Scripts/packages.sh
    - git diff --exit-code
    - sudo /usr/bin/xcode-select --switch /Applications/Xcode.app
    - brew install mint
    - LINT_MODE=$LINT_MODE ./Scripts/lint.sh    
    
build spm macos bushelkit:
  <<: *build_template
  <<: *build_spm_macos  
  variables:
    PACKAGE_NAME: "BushelKit"
    SCHEME_NAME: "BushelKit-Package"

build spm macos bushelapp:
  <<: *build_template
  <<: *build_spm_macos  
  variables:
    PACKAGE_NAME: "BushelApp"
    SCHEME_NAME: "BushelApp-Package"

build spm macos radiantkit:
  <<: *build_template
  <<: *build_spm_macos  
  variables:
    PACKAGE_NAME: "RadiantKit"
    SCHEME_NAME: "RadiantKit"

      
upload spm macos coverage:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $APPSTORE_DEPLOY == null
  needs: ["build spm macos bushelkit","build spm macos bushelapp","build spm macos radiantkit"]
  image: ellerbrock/alpine-bash-curl-ssl
  artifacts:
    paths:
      - cobertura.xml
  script:
    - bash <(curl https://codecov.io/bash) -t $CODECOV_TOKEN -F xcode15 -F macos

.build_template_linux: &build_template_linux
  stage: build
  only:
    - merge_requests
    - main
    - /^v\d+.\d+.\d+(-\w+\.\d+)?$/
  except:
    variables:
      - $APPSTORE_DEPLOY
  image: swift:5.10-jammy
  script:
    - cd Packages/$PACKAGE_NAME
    - swift build
    - swift test --enable-code-coverage
    - llvm-cov export -format="lcov" .build/x86_64-unknown-linux-gnu/debug/${PACKAGE_NAME}PackageTests.xctest -instr-profile .build/x86_64-unknown-linux-gnu/debug/codecov/default.profdata > cobertura.xml
    - apt-get update -y
    - apt-get install -y curl
    - bash <(curl https://codecov.io/bash) -t $CODECOV_TOKEN -F spm -F linux
     
build spm linux bushelkit:
  <<: *build_template_linux
  variables:
    PACKAGE_NAME: "BushelKit"
    
build spm linux bushelapp:
  <<: *build_template_linux
  variables:
    PACKAGE_NAME: "BushelApp"

build spm linux radiantkit:
  <<: *build_template_linux
  variables:
    PACKAGE_NAME: "RadiantKit"

lint:
  except:
    variables:
      - $APPSTORE_DEPLOY
  <<: *lint_template

match:
  stage: lint
  cache:
    key:
      files:
        - Gemfile.lock
    paths:
      - vendor/ruby
  tags:
    - macos  
  only:
    variables:
      - $MATCH
  script:
    - rbenv rehash
    - rbenv exec bundle install
    - rbenv exec bundle exec fastlane match appstore --additional_cert_types=mac_installer_distribution --readonly

testflight:
  stage: deploy
  cache:
    key:
      files:
        - Gemfile.lock
    paths:
      - vendor/ruby
  tags:
    - macos  
  only:
    - main
    - /^v\d+.\d+.\d+(-\w+\.\d+)?$/
    - /ARCHIVE/
  except:
    variables:
      - $APPSTORE_DEPLOY
  artifacts:
    paths:
      - archive/Bushel*.xcarchive
  script:
    - if [ "$CI_COMMIT_REF_NAME" = "main" ]; then LANE_NAME="beta"; else LANE_NAME="archive"; fi
    - rbenv rehash
    - rbenv exec bundle install
    - sudo /usr/bin/xcode-select --switch /Applications/Xcode-beta.app
    - LINT_MODE=NONE xcodegen
    - git remote set-url --push origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
    - rbenv exec bundle exec fastlane $LANE_NAME

production:
  stage: deploy
  cache:
    key:
      files:
        - Gemfile.lock
    paths:
      - vendor/ruby
  tags:
    - macos 
  only:
    refs:
      - main    
    variables:
      - $APPSTORE_DEPLOY
  artifacts:
    paths:
      - archive/Bushel*.xcarchive
  script:
    - rbenv rehash
    - rbenv exec bundle install
    - sudo /usr/bin/xcode-select --switch /Applications/Xcode-beta.app
    - git remote set-url --push origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
    - rbenv exec bundle exec fastlane production
